{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../../src/auth/auth.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,oBAAoB,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,MAAM,cAAc,CAAC;AAI9I,MAAM;IAiBJ,YACgC,SACc,QACF,MACrB,YACb,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAEpB,MAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACtC,MAAM,GAAG,GAAG,mBAAmB,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YACvD,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;SACnB,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,sBAAsB,CAC/C,SAAS,CAAC,iBAAiB,CACzB,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;YAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC7D,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC;SACxB,CAAC,CACH,CACF,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,sBAAsB,CAC7C,SAAS,CAAC,iBAAiB,CACzB,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;YAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC;SACxB,CAAC,CACH,CACF,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YAC7B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;SACjD,CAAC,CAAC,CAAC;KACL;;;YAlDF,UAAU;;;4CAmBN,MAAM,SAAC,oBAAoB;4CAC3B,QAAQ,YAAI,MAAM,SAAC,sBAAsB;4CACzC,QAAQ,YAAI,MAAM,SAAC,oBAAoB;yCACvC,MAAM,SAAC,WAAW;YA7BgB,MAAM","sourcesContent":["import { FirebaseAuth, User } from '@firebase/auth-types';\nimport { FirebaseOptions, FirebaseAppConfig } from '@firebase/app-types';\nimport { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { FirebaseOptionsToken, FirebaseAppConfigToken, FirebaseAppNameToken, _firebaseAppFactory, FirebaseZoneScheduler } from 'angularfire2';\n\n\n@Injectable()\nexport class AngularFireAuth {\n\n  /**\n   * Firebase Auth instance\n   */\n  public readonly auth: FirebaseAuth;\n\n  /**\n   * Observable of authentication state; as of 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<User|null>;\n\n  /**\n   * Observable of the signed-in user's ID token; which includes sign-in, sign-out, and token refresh events\n   */\n  public readonly idToken: Observable<string|null>;\n\n  constructor(\n    @Inject(FirebaseOptionsToken) options:FirebaseOptions,\n    @Optional() @Inject(FirebaseAppConfigToken) config:FirebaseAppConfig,\n    @Optional() @Inject(FirebaseAppNameToken) name:string,\n    @Inject(PLATFORM_ID) platformId: Object,\n    private zone: NgZone\n  ) {\n    const scheduler = new FirebaseZoneScheduler(zone, platformId);\n    this.auth = zone.runOutsideAngular(() => {\n      const app = _firebaseAppFactory(options, name, config);\n      return app.auth();\n    });\n\n    this.authState = scheduler.keepUnstableUntilFirst(\n      scheduler.runOutsideAngular(\n        new Observable(subscriber => {\n          const unsubscribe = this.auth.onAuthStateChanged(subscriber);\n          return { unsubscribe };\n        })\n      )\n    );\n\n    this.idToken = scheduler.keepUnstableUntilFirst(\n      scheduler.runOutsideAngular(\n        new Observable(subscriber => {\n          const unsubscribe = this.auth.onIdTokenChanged(subscriber);\n          return { unsubscribe };\n        })\n      )\n    ).pipe(switchMap((user:User) => {\n      return user ? from(user.getIdToken()) : of(null)\n    }));    \n  }\n\n}\n"]}