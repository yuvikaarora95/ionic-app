import { NgModule } from '@angular/core';
import { FirebaseOptionsToken, FirebaseAppNameToken, FirebaseAppConfigToken } from './angularfire2';
import firebase from '@firebase/app';
var FirebaseApp = (function () {
    function FirebaseApp() {
    }
    return FirebaseApp;
}());
export { FirebaseApp };
export function _firebaseAppFactory(options, name, appConfig) {
    var config = appConfig || {};
    if (name && config.name && config.name !== name) {
        console.warn('FirebaseAppNameToken and FirebaseAppConfigToken.name don\'t match, FirebaseAppNameToken takes precedence.');
    }
    config.name = name || config.name || '[DEFAULT]';
    var existingApp = firebase.apps.filter(function (app) { return app.name === config.name; })[0];
    return (existingApp || firebase.initializeApp(options, config));
}
var FirebaseAppProvider = {
    provide: FirebaseApp,
    useFactory: _firebaseAppFactory,
    deps: [FirebaseOptionsToken, FirebaseAppNameToken, FirebaseAppConfigToken]
};
var AngularFireModule = (function () {
    function AngularFireModule() {
    }
    AngularFireModule.initializeApp = function (options, appNameOrConfig) {
        var name = typeof appNameOrConfig === 'string' && appNameOrConfig || undefined;
        var config = typeof appNameOrConfig === 'object' && appNameOrConfig || undefined;
        return {
            ngModule: AngularFireModule,
            providers: [
                { provide: FirebaseOptionsToken, useValue: options },
                { provide: FirebaseAppNameToken, useValue: name },
                { provide: FirebaseAppConfigToken, useValue: config }
            ]
        };
    };
    AngularFireModule.decorators = [
        { type: NgModule, args: [{
                    providers: [FirebaseAppProvider],
                },] },
    ];
    return AngularFireModule;
}());
export { AngularFireModule };
//# sourceMappingURL=firebase.app.module.js.map